//------------------- Описание приложения agent -------------------------------//
Приложение agent служит для вычисления арифметического выражения, полученного от оркестратора.
Приложение основано на модуле "math-engine" взято с Гитхаба, который вычисляет математическое выражение,
описанное в строке. 
https://github.com/dengsgo/math-engine?tab=readme-ov-file
Для получения исполняемого файла даем несколько команд.
Для создания файла go.mod в консоли даю команду 
$ go mod init agent
Для скачивания модуля "math-engine" даем команду
$ go get -u github.com/dengsgo/math-engine
Для компиляции приложения, создания исполняемого файла даю команду
$ go build
В файле settings.txt хранятся настройки, которые применяются агентом при запуске.
Настройки в виде JSON строк. В первой строке настройка для оркестратора, во второй для самого агента.
При запуске приложения в функции main создается хранилище для задач RegisteredTaskMap,
устанавливается переменная maxTasks максимальное количество горутин с одновременно выполняемыми задачами.
Функция readSettings("settings.txt") читает настройки из настроечного файла. После этого агент регистрируется у 
оркестратора, после успешной регистрации запускается web сервер для приема REST запросов.
Во время экспериментов запускал оркестратор и два агента на одном компьютере. Оркестратор принимает запросы
на порту 8080, агенты принимали запросы на портах 8081 и 8082.
Основная работа выполняется в функции sendTask которая обрабатывает принятый POST запрос с задачей от оркестратора.
Сама задача, арифметическое выражение выполняется в функции solveTask, там в начале задается и регулируется 
в экспериментах длительность задержки, имитация длительных вычислений.
Другая важная работа, ответ на запрос оркестратора на получение результата выполняется в функции getFinishTask

Краткое описание алгоритма работы агента следующее. Агент запускается, читает настройки из файла. Регистрируется у
оркестратора, запускает web сервер, принимает JSON-ы с задачами. Принятую задачу ложит в хранилище задач.
Решает задачу, изменяет поля в JSON-e задачи. При получении запроса оркестратора на получение JSON-a задачи с 
результатом  если задача решилась, отправляет этот JSON c результатом, а из хранилища эту задачу удаляет.

Web сервер обрабатывает следующие запросы, для проверки отсылаем с помощью PostMan, RestClient или другого приложения.
	POST запрос отправка задачи от оркестратора агенту
http://localhost:8081/send_task/    
Body  {"id":3,"agentid":0,"expr":"1+6","result":0,"status":"start","begindate":"2024-02-07T19:25:34.10342208+03:00","enddate":"0001-01-01T00:00:00Z"}
Header  "Content-Type", "application/json"
curl -X POST -i http://localhost:8081/send_task/ --data '{"id":3,"agentid":0,"expr":"1+6","result":0,"status":"start","begindate":"2024-02-07T19:25:34.10342208+03:00","enddate":"0001-01-01T00:00:00Z"}'
	GET запрос получение задачи с ответом
http://localhost:8081/get_finish_task/?idtask=1
curl -X GET -i 'http://localhost:8081/get_finish_task/?idtask=1'