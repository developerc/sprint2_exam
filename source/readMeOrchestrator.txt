//------------------- Описание приложения orchestrator -------------------------------//
Для хранения задач приложение использует структуру данных Мар, поэтому после перезапуска данные не сохраняются.
Очередь задач так же выполнена в пределах приложния с помощью структуры данных Слайс.
Считаю что для учебных целей годится, времени на более сложный вариант нет. 
Впрочем получился вполне рабочий макет, выполняющий решение арифметических выражений "онлайн".
Что бы сформировать проект, проводить эксперименты, в Visual Studio создал новую папку.
Для создания файла go.mod в консоли даю команду 
$ go mod init orchestrator
запускаем командой 
$ go run orchestrator.go
Для компиляции приложения, создания исполняемого файла даю команду
$ go build

Краткое описание работы приложения следующее.
При запуске приложения создается очередь задач TaskQueue, хранилище задач RegisteredTaskMap, хранилище зарегистрированных агентов
RegisteredAgentMap. Запускается отдельный web сервер на порту 8080. Реализованы функции, обрабатывающие запросы к web серверу
от агентов и от web клиента. В отдельной горутине функцией handlerTaskQueue обрабатывается очередь задач. В бесконечном цикле 
проверяется  очередь задач TaskQueue. Если она не пустая, с головы очереди забирается задача и отправляется агенту. Если агент 
принимает задачу, голова от очереди отрезается. Если все агенты заняты, ждем освобождения агента.
В отдельной горутине в бесконечном цикле периодически перебираем хранилище задач и если задача находится в состоянии in_progress
запрашиваем агента который выполняет задачу прислать эту задачу с решением. Если задача решена или обнаружилась ошибка, сохраняем 
задачу в хранилище.
Задача может иметь состояния: 
start        когда принят запрос отклиента, сформирована задача, помещена в очередь и в хранилище. Ждет отправки агенту.
in_progress  задача отправлена агенту. Ждем решения.
finish       условие задачи корректно, задача решена
error        в условии задачи ошибка, например скобка открыта но не закрыта.

Web сервер обрабатывает следующие запросы, для проверки отсылаем с помощью PostMan, RestClient или другого приложения.
    POST запрос, принимается запрос на выполнение задачи.
http://localhost:8080/send_expr/?expr=1%2B6 
curl -X POST -i 'http://localhost:8080/send_expr/?expr=1%2B6'
 После expr= выражение для вычисления.
Валидными символами считаются числа от 0 до 9, () круглые скобки, * умножить, / разделить, - вычесть, + сложить. Символ "+" не получится 
передать в URL, это специальный символ, вместо него надо писать %2B Выражение выше означает задачу 1+6
    POST запрос, принимается запрос регистрации от агента у оркестратора
http://localhost:8080/agent_reg/
Body   {"ip":"localhost","port":8082}
Header  "Content-Type", "application/json"
curl -X POST -i http://localhost:8080/agent_reg/ --data '{"ip":"localhost","port":8082}'
    GET запрос, получение списка задач у оркестратора
http://localhost:8080/get_task_list/
curl -X GET -i http://localhost:8080/get_task_list/
	GET запрос, получение списка вычислительных мощностей в виде списка пар ID_агента : ID_задачи
http://localhost:8080/get_agent_list/
curl -X GET -i http://localhost:8080/get_agent_list/
    GET запрос, получение списка незавершенных задач в виде пар ID_задачи : время выполнения
http://localhost:8080/get_list_task_time/
curl -X GET -i http://localhost:8080/get_list_task_time/
    GET запрос, получение результата по ID задачи
curl -X GET -i 'http://localhost:8080/get_id_result/?id=1'
